{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GAMS",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#gamY_commands"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#Conditions"
		},
		{
			"include": "#equationSeparator"
		},
		{
			"include": "#VariableSuffix"
		},
		{
			"include": "#gamY_functions"
		},
		{
			"include": "#following_text"
		},
		{
			"include": "#semicolon_after_group"
		},
		{
			"include": "#custom_keywords"
		},
		{
			"include": "#math"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#double_dots"
		},
		{
			"include": "#math_signs"
		}
	],
	"repository": {
		"equationSeparator": {
			"name": "entity.name.type.gms",
			"match": "(?i)(=e=|=l=|=g=|=x=)"
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.gms",
				"match": "\\b(if|while|for|return)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.gms",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gms",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"name": "comment.line.gms",
			"match": "#.*"
		},
		"gamY_commands": {
			"patterns": [{
				"name": "keyword.control.gms",
				"match": "(?i)(\\$\\b(IMPORT|GROUP|SAVE|DISPLAY|FIX|UNFIX|OUTPUT|IF\\d*|ENDIF\\d*|BLOCK\\d*|ENDBLOCK|FOR\\d*|ENDFOR\\d*|LOOP\\d*|ENDLOOP\\d*|FUNCTION|ENDFUNCTION|REGEX\\d*|ENDREGEX\\d*|SUB\\d*|ENDSUB\\d*)\\b)|\\bMODEL\\b"
			}]
		},
		"brackets": {
			"name": "entity.name.type.gms",
			"match": "\\[.*?\\]"
		},
		"Conditions": {
			"name": "entity.name.function.gms",
			"match": "(\\$\\(([^\\(\\)]|\\([^\\(\\)]*(\\([^\\(\\)]*\\)[^\\(\\)]*)*\\))*\\))|(\\$[^\\s]*\\s)"
		},
		"VariableSuffix": {
			"name": "entity.name.function.gms",
			"match": "\\.(lo|up|fx|l|m|scale|prior|stage)\\b"
		},
		"gamY_functions": {
			"name": "keyword.control.gms",
			"match": "@\\w+(?=\\(.*?\\))"
		},
		"following_text": {
			"name": "keyword.operator.gams",
			"match": "(?<=\\$(GROUP|BLOCK)\\s)\\b\\w+\\b"
		},
		"semicolon_after_group": {
			"name": "keyword.control.gms",
			"match": "(?<=\\$GROUP[\\s\\S]*?);"
		},
		"custom_keywords": {
			"name": "keyword.control.gms",
			"match": "(?i)\\b(ABORT|ACRONYMS?|ALIAS|ALL|AND|ASSIGN|BINARY|CARD|DISPLAY|EPS|EQ|GE|GT|INF|INTEGER|LE|LOOP|LT|MAXIMIZING|MINIMIZING|MODELS?|NA|NE|NEGATIVE|NOT|OPTION|OPTIONS|OR|ORD|PROD|SMAX|SMIN|SOS1|SOS2|SUM|SYSTEM|TABLE|USING|XOR|YES|REPEAT|UNTIL|WHILE|IF|THEN|ELSE|SEMICONT|SEMIINT|FILES?|PUT|PUTPAGE|PUTTL|PUTCLOSE|FREE|NO|SOLVE|FOR|ELSEIF)\\b"
		},
		"math": {
			"name": "support.function.math.gms",
			"match": "(?i)\\b(ABS|ARCCOS|ARCSIN|ARCTAN|ARCTAN2|BETA|BETAREG|BINOMIAL|BOOL_(AND|EQV|IMP|NOT|OR|XOR)|CEIL|CENTROPY|COS|COSH|CVPOWER|DIV|DIV0|EDIST|ENTROPY|ERRORF|EXECSEED|EXP|FACT|FLOOR|FRAC|GAMMA|GAMMAREG|IFTHEN|LOG|LOG2|LOG10|LOGBETA|LOGGAMMA|MAPVAL|MAX|MIN|MOD|NCP(CM|F|VUPOW|VUSIN)|NORMAL|PI|POLY|POWER|RANDBINOMIAL|RANDLINEAR|RANDTRIANGLE|ROUND|RPOWER|SIGMOID|SIGN|SIGNPOWER|SIN|SINH|SL(EXP|LOG10|REC)|SQ(EXP|LOG10|R|REC|RT)|TANH?|TRUNC|UNIFORM|UNIFORMINT|VCPOWER)\\b"
		},
		"numbers": {
			"name": "constant.numeric.gms",
			"match": "\\b\\d+(\\.\\d+)?([eE][-+]?\\d+)?\\b"
		},
		"double_dots": {
			"name": "entity.name.type.gms",
			"match": "\\.\\."
		},
		"math_signs": {
			"name": "entity.name.type.gms",
			"match": "[+\\-*/^]"
		}
	},
	"scopeName": "source.gms"
}