{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GAMS",
	"patterns": [
		{
			"include": "#block_rule"
		},
		{
			"include": "#group_rule"
		},
		{
			"include": "#model_rule"
		},
		{ 
			"include": "#macro_rule"
		},
		{ 
			"include": "#GAMSerrors"
		},
		{
			"include": "#general"
		},
		{
			"include": "#equationdef"
		},    	
		{
			"include": "#suffix"
		},
		{
			"include": "#operator"
    	},
		{
			"include": "#gamY_commands"
		},
		{
			"include": "#semicolon_after_group"
		},
		{
			"include": "#gamY_function_call"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#parameter"
		},
		{
			"include": "#scalar"
		},
		{
			"include": "#set"
		},
		{
			"include": "#table"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#cornerbrackets"
		},
		{
			"include": "#Conditions"
		},
		{
			"include": "#functions"
		},
		{ 
			"include": "#symbols" 
		}
	],
	"repository": {
		"argument": {
            "match": "%(\\D\\w*%|\\d+)",
            "name": "entity.name.class.gms"
        },
		"symbols": {
			"match": "[,.;\\\\/]",
			"name": "entity.name.type.gms"
		},
		"GAMSerrors": {
			"match": "^\\*\\*\\*\\*",
			"name": "entity.name.type.gms"
    	},
		"Conditions": {
			"name": "keyword.control.conditional.gms",
			"match": "(\\$\\(([^\\(\\)]|\\([^\\(\\)]*(\\([^\\(\\)]*\\)[^\\(\\)]*)*\\))*\\))"
		},
		"blockcomment": {
			"begin": "(?i)^\\$ONTEXT",
			"contentName": "comment.block.documentation.gms",
			"end": "(?i)^\\$OFFTEXT",
			"name": "keyword.control.gms"
		},
    	"blockcommentc": {
			"begin": "/\\*",
			"contentName": "comment.block.documentation.gms",
			"end": "\\*/",
			"name": "comment.slashstar.gms"
    },
	    "blockcommentcurly": {
			"begin": "{",
			"contentName": "comment.block.documentation.gms",
			"end": "}",
			"name": "comment.curly.gms"
			},
    	"doublequotestring1": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
				"name": "punctuation.definition.string.begin.gms"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
				"name": "punctuation.definition.string.end.gms"
				}
			},
			"name": "string.quoted.double.gms",
			"patterns": [
				{
				"match": "%(\\w+%|\\d+)",
				"name": "entity.name.class.gms"
				}
			]
			},
		"doublequotestring2": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
				"name": "comment.line.sharp.gms"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
				"name": "comment.line.sharp.gms"
				}
			},
			"name": "comment.line.sharp.gms",
			"patterns": [
				{
				"match": "%(\\w+%|\\d+)",
				"name": "comment.line.sharp.gms"
				}
			]
			},   
		"fulllinecomment": {
				"captures": {
				"1": {
					"name": "punctuation.definition.comment.gms"
				}
				},
				"match": "^(\\*).*$\n?",
				"name": "comment.line.star.gms"
			},
		"linecomment": {
				"captures": {
					"1": {
					"name": "punctuation.definition.comment.gms"
					}
				},
				"match": "(#|//)(?!\\[\\[).*$\\n?",
				"name": "comment.line.sharp.gms"
			},
		"number": {
				"match": "(?<![\\d.])\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?",
				"name": "constant.numeric.gms"
    		},
		"singlequotestring": {
				"begin": "'",
				"beginCaptures": {
					"0": {
					"name": "punctuation.definition.string.begin.gms"
					}
				},
				"end": "'",
				"endCaptures": {
					"0": {
					"name": "punctuation.definition.string.end.gms"
					}
				},
				"name": "string.quoted.single.gms",
				"patterns": [
					{
					"match": "%(\\w+%|\\d+)",
					"name": "entity.name.class.gms"
					}
				]
				},
		"preprocess": {
				"match": "(?i)\\$(ABORT|BATINCLUDE|CALL|CLEAR|CLEARERRORS?|COMMENT|COMPRESS|DECOMPRESS|DEFINTION|DOLLAR|DOUBLE|DROP|DROP(ENV|GLOBAL|LOCAL)|ECHON?|EJECT|ELSE|ELSE(IF|IFE|IFI)|ENCRYPT|ENDIF|EOLCOM|ERROR|ESCAPE|EVAL|EVAL(GLOBAL|LOCAL)|EXIT|EXPOSE|FUNCLIBIN|GOTO|GDX(IN|OUT)|HIDDEN|HIDDENCALL|HIDE|IF|IF(E|I|THEN|THENE|THENI)|INCLUDE|INLINECOM|KILL|LABEL|LIBINCLUDE|LINES|LOAD|LOAD(DC|DCM|DCR|M|R)|LOG|MACRO|(MIN|MAX)COL|MAXGOTO|(ON|OFF)DELIM|(ON|OFF)DIGIT|(ON|OFF)DOLLAR|(ON|OFF)DOTL|(ON|OFF)ECHO|(ON|OFF)EMBEDDED|(ON|OFF)EMPTY|(ON|OFF)END|(ON|OFF)EOLCOM|(ON|OFF)EPS|(ON|OFF)EXPAND|(ON|OFF)GLOBAL|(ON|OFF)INCLUDE|(ON|OFF)INLINE|(ON|OFF)LISTING|(ON|OFF)LOCAL|(ON|OFF)LOG|(ON|OFF)MACRO|(ON|OFF)MARGIN|(ON|OFF)MULTI|(ON|OFF)NESTCOM|(ON|OFF)PUT|(ON|OFF)RECURSE|(ON|OFF)SYMLIST|(ON|OFF)SYMXREF|(ON|OFF)UELLIST|(ON|OFF)UELXREF|(ON|OFF)UNDF|(ON|OFF)VERBATIM|(ON|OFF)WARNING|(ON|OFF)UPPER|PHANTOM|PREFIXPATH|PROTECT|PURGE|REMARK|SET|SET(ARGS|COMPS|DDLIST|ENV|GLOBAL|LOCAL|NAMES)|SHIFT|SHOW|SINGLE|STARS|STITLE|STOP|SYSINCLUDE|TERMINATE|TITLE|UNLOAD|USE205|USE225|USE999|VERSION|WARNING)\\b",
				"name": "keyword.other.special-method.gms"
				},
			"general": {
      "patterns": [
				{
				"include": "#blockcomment"
				},
				{
				"include": "#doublequotestring1"
				},
				{
				"include": "#blockcommentcurly"
				},
				{
				"include": "#blockcommentc"
				},
				{
				"include": "#linecomment"
				},
				{
				"include": "#fulllinecomment"
				},
				{
				"include": "#number"
				},
				{
				"include": "#singlequotestring"
				},
				{
				"include": "#preprocess"
				},
				{
				"include": "#argument"
				}
			]
			},		
			"equation": {
				"begin": "\\.\\.",
				"beginCaptures": {
					"0": {
					"name": "keyword.control.gms"
					}
				},
				"end": ";",
				"name": "meta.function.gms",
				"patterns": [
					{
					"include": "#general"
					},
					{
						 "include": "#equationseparator"
					},
					{
						 "include": "#operator"
					}
				]
			},
		"equationseparator": {
				"match": "(?i)(=e=|=l=|=g=|=x=)",
				"name": "entity.name.type.gms"
			},
		"suffix": {
				"match": "(?i)\\.(L|LO|UP|FX|SCALE|PRIOR|PC|PS|PW|TM|BM|CASE|DATE|IFILE|OFILE|PAGE|RDATE|RFILE|RTIME|SFILE|TIME|TITLE|TS|TL|TE|TF|LJ|NJ|SJ|TJ|LW|NW|SW|TW|ND|NR|NZ|CC|HDCC|TLCC|LL|HDLL|TLLL|LP|WS)\\b",
				"name": "keyword.gms"
			},
		"operator": {
				"match": "(\\b(and|or|not)\\b)|(\\+|-|%|#|\\*|\\/|\\*\\*|=|<=?|>=?)",
				"name": "entity.name.type.gms"
			},
		"equationdef": {
			"begin": "(\\.\\.)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.gms"
				}
			},
			"end": "(;)",
			"endCaptures": {
				"1": {
					"name": "entity.name.type.gms"
				}
			},
			"patterns": [
				{
					"include": "#general"
				},
				{
					"include": "#cornerbrackets"
				},
				{
					"include": "#equationseparator"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#keyword"
				},
				{
					"include": "#brackets1"
				}
			]
			},
		"E_rule": {
					"match": "(?i)(E_\\w+)",
					"captures": {
						"0": {
							"name": "constant.numeric.gms"
						}
					}
				},
		"block_rule": {
				"begin": "(?i)(\\$BLOCK\\d*)\\s+(\\w+)",
				"beginCaptures": {
					"1": {
						"name": "keyword.control.gms"
					},
					"2": {
						"name": "constant.numeric.gms"
					}
				},
				"end": "(\\$ENDBLOCK)",
				"endCaptures": {
					"1": {
						"name": "keyword.control.gms"
					}
				},
				"applyEndPatternLast": true,
				"patterns": [
				{
					"include": "#equationdef" 
				},
				{
					"include": "#general"
				},
				{
					"include": "#Conditions"
				},
				{
					"include": "#E_rule"
				},
				{
					"include": "#cornerbrackets"
				}
		   ]
			},
		"model_rule": {
				"begin": "^\\s*(?i)(MODEL)",
				"beginCaptures": {
					"0": {
						"name": "keyword.control.gms"
					}
				},
				"end": "(;)",
				"endCaptures": {
					"0": {
						"name": "entity.name.type.gms"
					}
				},
				"patterns": [
				{
					"include": "#general"
				},
				{
					"include": "#equationdef"
				},
				{
					"include": "#Conditions"
				},
				{
					"include": "#cornerbrackets"
				},
				{
					"include": "#operator"
				}
			]
		},
		"group_rule": {
				"begin": "(?i)(\\$GROUP\\d*)\\s+(\\w+)",
				"beginCaptures": {
					"1": {
						"name": "keyword.control.gms"
					},
					"2": {
						"name": "constant.numeric.gms"
					}
				},
				"end": "(\\;)",
				"endCaptures": {
					"1": {
						"name": "keyword.control.gms"
					}
				},
				"applyEndPatternLast": true,
				"patterns": [
				{
				"include": "#doublequotestring2"
				},
				{
				"include": "#general"
				},
				{
					"include": "#cornerbrackets"
				},
				{
					"include": "#Conditions"
				}
		   ]
			},
		"macro_rule": {
				"begin": "(?i)(\\$MACRO)\\s+",
				"beginCaptures": {
					"1": {
						"name": "keyword.control.gms"
					}
				},
				"end": "(\\w+)",
				"endCaptures": {
					"0": {
						"name": "constant.numeric.gms"
					}
				},
				"patterns": [
					{
						"include": "#general"
					}
				]
			},
		"gamY_commands": {
				"match": "(?i)\\$(IMPORT|MODEL|GROUP|SAVE|DISPLAY|FIX|UNFIX|OUTPUT|IF\\d*|ENDIF\\d*|BLOCK\\d*|ENDBLOCK|FOR\\d*|ENDFOR\\d*|LOOP\\d*|ENDLOOP\\d*|FUNCTION|ENDFUNCTION|REGEX\\d*|ENDREGEX\\d*|SUB\\d*|ENDSUB\\d*)\\b",
				"name": "keyword.control.gms"
			},
		"gamY_function_call": {
				"match": "(?i)(\\%\\w+\\((([\\w\\d]+),)*([\\w\\d]+)?\\)\\%)",
				"name": "keyword.operator.gams"
			},
		"keyword": {
				"match": "(?i)\\b(ABORT|ACRONYMS?|ALIAS|ALL|AND|ASSIGN|BINARY|CARD|DISPLAY|EPS|EQ|GE|GT|INF|INTEGER|LE|LOOP|LT|MAXIMIZING|MINIMIZING|NA|NE|NEGATIVE|NOT|OPTION|OPTIONS|OR|ORD|PROD|SMAX|SMIN|SOS1|SOS2|SUM|SYSTEM|TABLE|USING|XOR|YES|REPEAT|UNTIL|WHILE|IF|THEN|ELSE|SEMICONT|SEMIINT|FILES?|PUT|PUTPAGE|PUTTL|PUTCLOSE|FREE|NO|SOLVE|FOR|ELSEIF)\\b",
				"name": "keyword.other.special-method.gms"
			},
		"parameter": {
				"begin": "(?i)(^|;)\\s*\\b(PARAMETERS?)\\s+",
				"beginCaptures": {
					"2": {
					"name": "keyword.control.gms"
					}
				},
				"end": ";",
				"endCaptures": {
					"0": {
					"name": "keyword.control.gms"
					}
				},
				"name": "meta.function.gms",
				"patterns": [
					{
					"include": "#general"
					},
					{
						"include": "#cornerbrackets"
					},
					{
						"include": "#operator"
					}
				]
			},
		"scalar": {
				"begin": "(?i)(^|;)\\s*\\b(SCALARS?)",
				"beginCaptures": {
					"2": {
					"name": "keyword.control.gms"
					}
				},
				"end": ";",
				"name": "meta.function.gms",
				"patterns": [
					{
					"include": "#general"
					},
					{
					"include": "#scalarvalue"
					}
				]
			},
		"scalarvalue": {
				"begin": "\\/",
				"contentName": "normal.gms",
				"end": "\\/",
				"name": "keyword.operator.gms",
				"patterns": [
					{
					"match": "(?<![\\d.])(-)?\\d+(\\.\\d*)?([eE]-?\\d+)?|(-)?\\.\\d+([eE]-?\\d+)?|(\\.)?",
					"name": "constant.numeric.lua"
					},
					{
					"include": "#general"
					}
				]
			},
		"set": {
				"begin": "(?i)(^|;)\\s*\\b(singleton\\s+SETS?|SETS?)\\s+",
				"beginCaptures": {
					"2": {
						"name": "keyword.control.gms"
					}
				},
				"end": ";",
				"endCaptures": {
					"0": {
						"name": "keyword.control.gms"
					}
				},
				"name": "meta.function.gms",
				"patterns": [
					{
					"include": "#general"
					}
					,{
					"include": "#cornerbrackets"
					},
					{
					"include": "#operator"
					}
				]
			},
		"table": {
				"begin": "(?i)(^|;)\\s*\\b(TABLES?)\\s+",
				"beginCaptures": {
				"2": {
					"name": "keyword.control.gms"
				}
				},
				"end": ";",
				"name": "meta.function.gms",
				"patterns": [
				{
					"include": "#general"
				}
				]
			},
		"variable": {
				"begin": "(?i)(^|;)\\s*(\\b(VARIABLES?)|(\\bPOSITIVE\\s+VARIABLES?))\\s+",
				"beginCaptures": {
					"2": {
					"name": "keyword.control.gms"
					}
				},
				"end": ";",
				"name": "meta.function.gms",
				"patterns": [
					{
					"include": "#general"
					}
				]
			},
		"cornerbrackets": {
				"name": "entity.name.type.gms",
				"match": "\\[.*?\\]"
			},
		"brackets1": {
				"begin": "(\\()",
				"end": "(\\))",
				"beginCaptures": {
					"1": {"name": "punctuation.brackets.1.gms"}
				},
				"endCaptures": {
					"1": {"name": "punctuation.brackets.1.gms"}
				},
				"patterns": [
					{
						"include": "#brackets2"
					},
					{
						"include": "#general"
					},
					{
						"include": "#Conditions"
					},
					{
						"include": "#cornerbrackets"
					},
					{
						"include": "#E_rule"
					},
					{
						"include": "#functions"
					}
				]
			},
		"brackets2": {
				"begin": "(\\()",
				"end": "(\\))",
				"beginCaptures": {
					"1": {"name": "punctuation.brackets.2.gms"}
				},
				"endCaptures": {
					"1": {"name": "punctuation.brackets.2.gms"}
				},
				"patterns": [
					{
						"include": "#brackets3"
					},
					{
						"include": "#general"
					},
					{
						"include": "#Conditions"
					},
					{
						"include": "#cornerbrackets"
					},
					{
						"include": "#E_rule"
					},
					{
						"include": "#functions"
					}
				]
			},
		"brackets3": {
				"begin": "(\\()",
				"end": "(\\))",
				"beginCaptures": {
					"1": {"name": "punctuation.brackets.3.gms"}
				},
				"endCaptures": {
					"1": {"name": "punctuation.brackets.3.gms"}
				},
				"patterns": [
					{
						"include": "#brackets4"
					},
					{
						"include": "#general"
					},
					{
						"include": "#Conditions"
					},
					{
						"include": "#cornerbrackets"
					},
					{
						"include": "#E_rule"
					},
					{
						"include": "#functions"
					}
				]
			},
		"brackets4": {
				"begin": "(\\()",
				"end": "(\\))",
				"beginCaptures": {
					"1": {"name": "punctuation.brackets.4.gms"}
				},
				"endCaptures": {
					"1": {"name": "punctuation.brackets.4.gms"}
				},
				"patterns": [
					{
						"include": "#brackets1"
					},
					{
						"include": "#general"
					},
					{
						"include": "#Conditions"
					},
					{
						"include": "#cornerbrackets"
					},
					{
						"include": "#E_rule"
					},
					{
						"include": "#functions"
					}
				]
			},
		"functions": {
				"name": "keyword.control.gms",
				"match": "@\\w+(?=\\(.*?\\))"
			}
	},
	"scopeName": "source.gms"
}